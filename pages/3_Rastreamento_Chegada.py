# pages/3_Rastreamento_Chegada.py
import streamlit as st
import pandas as pd
import io
from pandas import ExcelWriter
from utils.data_loader import load_excel
from utils.data_matcher import cruzar_emissao_com_chegada
from utils.charts import plot_tempo_transito, plot_chegadas_por_dia, plot_eficiencia_transportadora

st.header("üìç Rastreamento de Chegada na F√°brica")

st.markdown("""
Esta p√°gina permite cruzar os dados de **emiss√£o de notas fiscais** com a **chegada dos caminh√µes na balan√ßa da f√°brica**, possibilitando:
- Verificar quais NFs foram localizadas
- Calcular o tempo de tr√¢nsito (emiss√£o ‚Üí chegada)
- Identificar pend√™ncias e atrasos
""")

col1, col2 = st.columns(2)
with col1:
    uploaded_emissao = st.file_uploader("üìÅ Envie a planilha de EMISS√ÉO de NFs", type=["xlsx"])
with col2:
    uploaded_chegada = st.file_uploader("üì• Envie a planilha de CHEGADAS (balan√ßa)", type=["xlsx"])

if uploaded_emissao and uploaded_chegada:
    df_emissao = load_excel(uploaded_emissao)
    df_chegada = load_excel(uploaded_chegada)

    # Normaliza colunas e verifica presen√ßa da coluna cr√≠tica
    df_emissao.columns = df_emissao.columns.str.strip().str.upper()
    st.write("üìã Colunas da planilha de emiss√£o:", df_emissao.columns.tolist())

    if "DATA EMISS√ÉO NF" not in df_emissao.columns:
        st.error("‚ùå Coluna 'DATA EMISS√ÉO NF' n√£o encontrada na planilha de emiss√£o!")
        st.stop()

    df_emissao["DATA EMISS√ÉO NF"] = pd.to_datetime(df_emissao["DATA EMISS√ÉO NF"], errors="coerce")

    # Filtro de data
    st.markdown("### üìÖ Filtrar por Data de Emiss√£o")
    col1, col2 = st.columns(2)
    with col1:
        data_inicio = st.date_input("Data Inicial", value=df_emissao["DATA EMISS√ÉO NF"].min().date())
    with col2:
        data_fim = st.date_input("Data Final", value=df_emissao["DATA EMISS√ÉO NF"].max().date())

    df_emissao = df_emissao[
        (df_emissao["DATA EMISS√ÉO NF"] >= pd.to_datetime(data_inicio)) &
        (df_emissao["DATA EMISS√ÉO NF"] <= pd.to_datetime(data_fim))
    ]

    # Filtros adicionais: ORDEM DE BUSCA e OBS
    st.markdown("### üîç Filtros de Valida√ß√£o")
    aplicar_filtros = st.checkbox("Aplicar filtros para excluir notas canceladas, complementares ou j√° localizadas")

    if aplicar_filtros:
        df_emissao = df_emissao[
            (df_emissao["ORDEM DE BUSCA"].isna()) &
            (df_emissao["OBS"].isna())
        ]

    try:
        df_merged = cruzar_emissao_com_chegada(df_emissao, df_chegada)
    except ValueError as e:
        st.error(str(e))
        st.stop()

    st.success("‚úÖ Dados carregados e cruzados com sucesso!")

    with st.container():
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üì¶ Notas Emitidas", len(df_emissao))
        with col2:
            st.metric("‚úÖ Chegadas Localizadas", df_merged["LOCALIZADA"].sum())
        with col3:
            st.metric("üö´ Pendentes", len(df_merged) - df_merged["LOCALIZADA"].sum())
        with col4:
            st.metric("üîé NFs v√°lidas na balan√ßa", df_chegada.shape[0])

    st.write("### ‚è±Ô∏è Tempo de Tr√¢nsito (dias entre emiss√£o e chegada)")
    st.plotly_chart(plot_tempo_transito(df_merged), use_container_width=True)

    st.write("### üìà Chegadas por Dia")
    st.plotly_chart(plot_chegadas_por_dia(df_merged), use_container_width=True)

    st.write("### ü•á Efici√™ncia por Transportadora")
    st.plotly_chart(plot_eficiencia_transportadora(df_merged), use_container_width=True)

    st.markdown("### üì§ Exportar NFs Pendentes (N√£o Localizadas na F√°brica)")
    df_pendentes = df_merged[~df_merged["LOCALIZADA"]].copy()

    colunas_exportar = ["NF EMITIDA", "DATA EMISS√ÉO NF", "TRANSP. ATUAL", "FAZENDA"]
    colunas_existentes = [col for col in colunas_exportar if col in df_pendentes.columns]

    df_export = df_pendentes[colunas_existentes]
    df_export["STATUS"] = "N√£o localizada na balan√ßa"

    st.dataframe(df_export)

    # Gera√ß√£o do Excel na m√£o aqui, removendo a importa√ß√£o anterior
    output = io.BytesIO()
    with ExcelWriter(output, engine='openpyxl') as writer:
        df_export.to_excel(writer, index=False, sheet_name="Pendentes")
    output.seek(0)

    st.download_button(
        label="‚¨áÔ∏è Baixar Pendentes (.xlsx)",
        data=output,
        file_name="notas_pendentes_corrientes.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
